extends layout/layout

mixin connection(username,connectionId)
    li(class="bg-green-300 text-lg flex items-center" data-id=connectionId data-active="true")
        img(src="/images/user.png" alt='user image' height='50px' width='50px' class="rounded-full m-4")
        p= username

block fullWidthContent    
    div(class='flex overflow-hidden' style="height:92vh")
        section#userlists(class="w-1/4 overflow-scroll relative")
            div(class='w-full') 
                input(type='text' class="block w-11/12 border border-green-500 rounded-lg bg-white mx-auto my-2 p-2" placeholder='search users' id='search-field')
            div#searchlists(class="absolute bg-white w-full text-lg px-5")            

            ul(class="divide-y-2 divide-green-500 flex flex-col userlists") 
                each connection in connections
                    - let connectionId = connection._id
                    if connection.users[0]._id.toString() != authUser._id.toString()
                        - let username = connection.users[0].username
                        +connection(username,connectionId,true)
                    else
                        - let username = connection.users[1].username                        
                        +connection(username,connectionId,true)

        section#messagelists(class="relative bg-blue-100 w-full")
            nav(class='w-full bg-blue-200 text-black font-bold p-3 text-xl ' id='message-nav')
                p none
            div(class='px-5 h-full overflow-scroll message-wrapper')
                div(class='messages flex flex-col items-baseline mb-8')
                    //- p(class="text-white text-lg bg-green-500 rounded-lg p-2 m-1 self-end") message1 
                    //- p(class="text-white text-lg bg-gray-400 rounded-lg p-2 m-1 self-start") message1

            form(class="absolute bottom-0 left-0 right-0 flex" id='form')        
                input(type='text' class='border border-green-500 px-3 py-2 flex-1' autocomplete='off' id='message')
                button(class='bg-blue-500 text-white font-bold px-5 py-3' id='send__btn') Send

block customScripts
    script.     
        let socket = io()       

        function sendMessage() {
            let message = $('#message').val()
            if(message.trim().length == 0) return;

            let connectionId = $('.userlists li[data-active="true"]').data('id')
            let senderId = "#{authUser._id}"
            socket.emit('message', {message,connectionId,senderId});   
        }

        $('#send__btn').click(function(e){
            e.preventDefault()
            sendMessage();
        })

        // activate the first connection in connection list
        updateActiveUser($('ul.userlists li').first().data('id'))

        // activate the clicked connection
        $('.userlists li').click(function(e){                            
            let clickedDataId = $(this).data('id')
            updateActiveUser(clickedDataId)            
        })

        // join rooms of all the connections
        $('.userlists li').each(function(idx,ele){
            let connId = $(ele).data('id')
            socket.emit('join', {connId, username: "#{authUser.username}"}, (x) => {
                console.log(x)
            })
        })

        // activate connection with given connectionId
        function updateActiveUser(connId){           
            $('.userlists li').each(function(idx,ele){                            
                if($(ele).data('id') == connId){
                    $(ele).addClass('bg-green-300').removeClass('bg-gray-300')
                    $(ele).attr('data-active',"true")

                    let activeUsername = $(ele).find('p').text()
                    $('#message-nav').text(activeUsername)
                }else{
                    $(ele).addClass('bg-gray-300').removeClass("bg-green-300")
                    $(ele).attr('data-active',"false")
                }
            })
        }

        socket.on('message',function({message,connectionId, senderId}){                                                
            if(senderId == "#{authUser._id}"){
                $('.messages').append(`<p class="text-white text-lg bg-green-500 rounded-lg p-2 m-1 self-end">${message}</p>`)
            }else{
                $('.messages').append(`<p class="text-white text-lg bg-gray-400 rounded-lg p-2 m-1 self-start">${message}</p>`)
            }

            $('#message').val('')

            // activate the user from whom the message is received
            updateActiveUser(connectionId)            

            $('.message-wrapper').scrollTop($('.message-wrapper')[0].scrollHeight)
        })                        

        // get all the users that matches search query
        $('#search-field').keyup(function(e){            
            if($(this).val().trim().length == 0){
                $('#searchlists').empty()
                return;
            }

            fetch(`/home/user?search=${$(this).val()}`)
            .then(res=> res.json())
            .then(res => {                
                $('#searchlists').empty()
                res.data.users.forEach(user => {                       
                    $('#searchlists').append(
                        `
                        <div class='flex justify-between'>
                            <p>${user.username}</p>
                            ${res.data.connectionLists.includes(user._id.toString()) ? "Connected" : `<button class="connect__btn" data-id="${user._id}">Connect</button>`}
                        </div>
                        `
                    )
                })
            })
        })

        // connect users if connect button clicked
        $('#searchlists').on('click','.connect__btn', function(e){
            e.preventDefault()

            fetch(`/home/connection?userId=${$(this).data('id')}`)
                .then(res=> res.json())
                .then(res => {                
                    $('#searchlists').empty()                    
                    $('#search-field').val('')
                }).catch(err => {
                    alert("ERROR");
                })
        })        
